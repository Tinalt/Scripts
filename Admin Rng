---Notification gui

-- -- Create a ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

-- Create a TextLabel for the notification
local notification = Instance.new("TextLabel")
notification.Size = UDim2.new(0.3, 0, 0.2, 0)  -- Width and height of the notification
notification.Position = UDim2.new(0.35, 0, 1, 0)  -- Start at the bottom of the screen
notification.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)  -- Dark grey background
notification.BackgroundTransparency = 0.3  -- 50% transparent
notification.BorderSizePixel = 3.5  -- Outline thickness
notification.BorderColor3 = Color3.new(0, 0, 0)  -- Black outline
notification.TextColor3 = Color3.new(1, 1, 1)  -- White text
notification.TextScaled = true
notification.TextWrapped = true
notification.Text = "Admin RNG 🍀\nAnti Kick Loaded"  -- Change this to your desired message
notification.Font = Enum.Font.ArialBold
notification.Parent = screenGui

-- Add padding to the TextLabel
local padding = Instance.new("UIPadding")
padding.PaddingTop = UDim.new(0.1, 0)
padding.PaddingBottom = UDim.new(0.1, 0)
padding.PaddingLeft = UDim.new(0.1, 0)
padding.PaddingRight = UDim.new(0.1, 0)
padding.Parent = notification

-- Use TweenService to create the slide animation
local TweenService = game:GetService("TweenService")

local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
local targetPosition1 = UDim2.new(0.35, 0, 0.8, 0)  -- Middle of the screen
local targetPosition2 = UDim2.new(0.35, 0, 1, 0)  -- Bottom of the screen

local slideUpTween = TweenService:Create(notification, tweenInfo, {Position = targetPosition1})
local slideDownTween = TweenService:Create(notification, tweenInfo, {Position = targetPosition2})

-- Play the slide up tween
slideUpTween:Play()

-- After the slide up tween completes, wait for 2 seconds and then play the slide down tween
slideUpTween.Completed:Connect(function()
    wait(3)
    slideDownTween:Play()
end)

-- Destroy the screenGui after the slide down tween completes
slideDownTween.Completed:Connect(function()
    screenGui:Destroy()
end)



wait(0.3)

---Admin RNG Gui

local Library = loadstring(Game:HttpGet("https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wizard"))()

--Window

local Window = Library:NewWindow(" Admin RNG 🍀")

--Tabs

local Tab = Window:NewSection("Hubs")

local Tab2 = Window:NewSection("Scripts")

local Tab3 = Window:NewSection("Boombox")

local Tab4 = Window:NewSection("Obby")

local Tab5 = Window:NewSection("Credits")

--Button

Tab:CreateButton("Demonic Hub V2 [KEY]", function()
loadstring(game:HttpGet("https://scriptblox.com/raw/Universal-Script-OP-GUI-UPDATED-NUMBER-ONE-14914"))()
end)

Tab:CreateButton("DoraScript Hub", function()
loadstring(game:HttpGet("https://scriptblox.com/raw/Admin-RNG-THE-BEST-SCRIPT-WITH-MORE-FEATURES-WITH-LASTEST-UPDATE-14966"))()
end)

Tab:CreateButton("Tora IsMe Gui", function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/thanhdat4461/Script/main/Admin%20RNG", true))()
end)

-- Create the Toggle
local toggleActive = false

Tab2:CreateToggle("Auto Roll (×2 Roll)", function(value)
    toggleActive = value
    print(value)

    if toggleActive then
        -- Start a coroutine to handle the loop
        coroutine.wrap(function()
            while toggleActive do
                local args = {
                    [1] = true,
                    [2] = true
                }

                game:GetService("ReplicatedStorage").Events.Spin:InvokeServer(unpack(args))
                wait(0.5)
            end
        end)()
    end
end)

Tab2:CreateButton("Infinite Yield", function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
end)

Tab2:CreateButton("Nameless Admin", function()
-- Thanks to 0866 for making the whole ui work, this admin script was actually made in 2019 lol but was modified by qipu
-- For the commands thanks to IY, Fates Admin, HomeBrew, CMD-X for some of the code and command ideas!
-- For the people thanks to Digitality, i_db, rouxhaver, spec and the v3rmillion community, if you see your script in the source and want credits please dm qipu#9312
-- ! Make sure to have an executor that supports firetouchinterest for the tool commands !
loadstring(game:HttpGet("https://raw.githubusercontent.com/FilteringEnabled/NamelessAdmin/main/Source"))();

end)

Tab2:CreateButton("Troll Gui", function()
loadstring(game:HttpGet"https://raw.githubusercontent.com/Tinalt/Scripts/main/Admin%20RNG%20Troll%20Gui")()
end)

Tab2:CreateButton("Swap Gui (Instant Kill)", function()
loadstring(game:HttpGet"https://raw.githubusercontent.com/Tinalt/Scripts/main/Admin%20RNG%20Swap%20Gui")()
end)

Tab2:CreateButton("Anti Afk", function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/Tinalt/Scripts/main/Anti%20Afk"))()
end)

Tab4:CreateButton("Teleport To Easy Obby", function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-597.1835327148438, 273.5558776855469, 17.827932357788086)
end)

Tab4:CreateButton("Instant Win Easy Obby", function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1306.8134765625, 24.42049217224121, 2523.001220703125)
end)

Tab4:CreateButton("Teleport To Hard Obby", function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-616.4325561523438, 273.2558898925781, 17.163982391357422)
end)

Tab4:CreateButton("Instant Win Hard Obby", function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1616.743896484375, 3.870882511138916, 2454.965087890625)
end)

Tab3:CreateButton("You need Boombox cmd!", function()

end)

Tab3:CreateButton("Give Boombox", function()
local args = {
    [1] = "/boombox",
    [2] = "tin782u"
}

game:GetService("ReplicatedStorage").Events.PanelTrigger:FireServer(unpack(args))

end)

Tab3:CreateButton("The Will To Fight A", function()

local args = {
    [1] = "PlaySong",
    [2] = 1845793864
}

game:GetService("Players").LocalPlayer.Character.Boombox.Remote:FireServer(unpack(args))
end)

Tab3:CreateButton("It's Been So Long FNAF", function()

local args = {
    [1] = "PlaySong",
    [2] = 6913550990
}

game:GetService("Players").LocalPlayer.Character.Boombox.Remote:FireServer(unpack(args))
end)

Tab3:CreateButton("Beast Unleashed", function()

local args = {
    [1] = "PlaySong",
    [2] = 1835333669
}

game:GetService("Players").LocalPlayer.Character.Boombox.Remote:FireServer(unpack(args))
end)

Tab3:CreateButton("Trash Man", function()

local args = {
    [1] = "PlaySong",
    [2] = 636922227
}

game:GetService("Players").LocalPlayer.Character.Boombox.Remote:FireServer(unpack(args))
end)

Tab3:CreateButton("You've been RickRoll", function()

local args = {
    [1] = "PlaySong",
    [2] = 7363412529
}

game:GetService("Players").LocalPlayer.Character.Boombox.Remote:FireServer(unpack(args))
end)

Tab5:CreateButton("Made by Tin", function()
end)





-------Window 2







local Window2 = Library:NewWindow("Auto Commands")
local Tab = Window2:NewSection("Auto")
local Tab2 = Window2:NewSection("Auto 2")
local Tab3 = Window2:NewSection("Auto 3")

-- Function to find players by partial name or display name
local function findPlayersByNameOrDisplayName(partialName)
    partialName = partialName:lower()

    local foundPlayers = {}
    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
        local playerName = player.Name:lower()
        local displayName = player.DisplayName:lower()

        if string.find(playerName, partialName, 1, true) or string.find(displayName, partialName, 1, true) then
            table.insert(foundPlayers, player)
        end
    end

    return foundPlayers
end

-- Function to activate a command for players
local function activateCommandForPlayers(command, players)
    for _, player in ipairs(players) do
        local args = {
            [1] = command,
            [2] = player.Name  -- Use the player's username
        }

        game:GetService("ReplicatedStorage").Events.PanelTrigger:FireServer(unpack(args))
    end
end

-- Function to activate /thanos for a random player
local function activateThanosForRandomPlayer()
    local players = game:GetService("Players"):GetPlayers()
    local randomPlayer = players[math.random(1, #players)]

    local args = {
        [1] = "/thanos",
        [2] = randomPlayer.Name
    }

    game:GetService("ReplicatedStorage").Events.PanelTrigger:FireServer(unpack(args))
end

-- Variable to store the player name from the textbox
local playerName = ""

-- Create the TextBox for entering player username
Tab:CreateTextbox("Enter Player Username", function(text)
    playerName = text
end)

-- Variable to store toggle state
local toggleActive = false

-- Create the Toggle for activating /thanos
Tab:CreateToggle("Auto /thanos", function(value)
    toggleActive = value

    if toggleActive then
        -- Start a coroutine to handle the loop with a 1-second delay
        coroutine.wrap(function()
            while toggleActive do
                -- Check if "random" is typed in the textbox
                if playerName:lower() == "random" then
                    activateThanosForRandomPlayer()
                else
                    -- Find players based on the partial name entered in the textbox
                    local players = findPlayersByNameOrDisplayName(playerName)

                    if #players > 0 then
                        activateCommandForPlayers("/thanos", players)
                    else
                        print("No players found matching: " .. playerName)
                    end
                end

                wait(11)
            end
        end)()
    else
        print("Toggle deactivated")
        -- You can add logic here for when the toggle is deactivated, if needed
    end
end)

-- Create the Button for activating /thanos
Tab:CreateButton("Activate /thanos", function()
    -- Check if "random" is typed in the textbox
    if playerName:lower() == "random" then
        activateThanosForRandomPlayer()
    else
        -- Find players based on the partial name entered in the textbox
        local players = findPlayersByNameOrDisplayName(playerName)

        if #players > 0 then
            activateCommandForPlayers("/thanos", players)
        else
            print("No players found matching: " .. playerName)
        end
    end
end)

-- Create the TextBox
local playerName = ""

Tab:CreateTextbox("Enter Player Username", function(text)
    playerName = text
end)

-- Function to find players by name or display name
local function findPlayersByNameOrDisplayName(name)
    if name:lower() == "all" then
        local players = game:GetService("Players"):GetPlayers()
        local filteredPlayers = {}
        for _, player in ipairs(players) do
            if player ~= game.Players.LocalPlayer then
                table.insert(filteredPlayers, player)
            end
        end
        return filteredPlayers  -- Return all players except local player if "all" is typed
    elseif name:lower() == "others" then
        local players = game:GetService("Players"):GetPlayers()
        local filteredPlayers = {}
        for _, player in ipairs(players) do
            if player ~= game.Players.LocalPlayer then
                table.insert(filteredPlayers, player)
            end
        end
        return filteredPlayers  -- Return all players except local player if "others" is typed
    end

    local foundPlayers = {}
    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
        if string.find(player.Name:lower(), name:lower()) or string.find(player.DisplayName:lower(), name:lower()) then
            table.insert(foundPlayers, player)
        end
    end
    return foundPlayers
end

Tab:CreateButton("Kill <player>", function()
    local players = findPlayersByNameOrDisplayName(playerName)
    if #players > 0 then
        for _, player in ipairs(players) do
            local args = {
                [1] = player,
                [2] = 999999999  -- Some value to pass as the second argument
            }

            game:GetService("ReplicatedStorage").Events.Thanos:FireServer(unpack(args))
        end
    else
        print("No players found matching: " .. playerName)
    end
end)

-- Create the Toggle
local toggleActive = false

Tab:CreateToggle("Auto Kill", function(value)
    toggleActive = value

    if toggleActive then
        -- Start a coroutine to handle the loop
        coroutine.wrap(function()
            while toggleActive do
                local players = findPlayersByNameOrDisplayName(playerName)
                if #players > 0 then
                    for _, player in ipairs(players) do
                        local args = {
                            [1] = player,
                            [2] = 999999999  -- Some value to pass as the second argument
                        }

                        game:GetService("ReplicatedStorage").Events.Thanos:FireServer(unpack(args))
                    end
                else
                    print("No players found matching: " .. playerName)
                end
                wait(1)
            end
        end)()
    end
end)

-- Create the TextBox
local playerName = ""

Tab:CreateTextbox("Enter Player Username", function(text)
    playerName = text
end)

-- Function to find players by name or display name
local function findPlayersByNameOrDisplayName(name)
    if name:lower() == "all" then
        return game:GetService("Players"):GetPlayers()  -- Return all players if "all" is typed
    elseif name:lower() == "others" then
        local players = game:GetService("Players"):GetPlayers()
        local filteredPlayers = {}
        for _, player in ipairs(players) do
            if player ~= game.Players.LocalPlayer then
                table.insert(filteredPlayers, player)
            end
        end
        return filteredPlayers  -- Return all players except local player if "others" is typed
    end

    local foundPlayers = {}
    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
        if string.find(player.Name:lower(), name:lower()) or string.find(player.DisplayName:lower(), name:lower()) then
            table.insert(foundPlayers, player)
        end
    end
    return foundPlayers
end

-- Create the Button for /strong Command
Tab:CreateButton("Activate /strong <player>", function()
    local players = findPlayersByNameOrDisplayName(playerName)
    if #players > 0 then
        for _, player in ipairs(players) do
            local args = {
                [1] = "/strong",
                [2] = player.Name  -- Use the player's username
            }

            game:GetService("ReplicatedStorage").Events.PanelTrigger:FireServer(unpack(args))
        end
    else
        print("No players found matching: " .. playerName)
    end
end)


-- Create the Toggle
local toggleActive = false

Tab:CreateToggle("Auto /strong", function(value)
    toggleActive = value

    if toggleActive then
        -- Start a coroutine to handle the loop
        coroutine.wrap(function()
            while toggleActive do
                local players = findPlayersByNameOrDisplayName(playerName)
                if #players > 0 then
                    for _, player in ipairs(players) do
                        local args = {
                            [1] = "/strong",
                            [2] = player.Name  -- Use the player's username
                        }

                        game:GetService("ReplicatedStorage").Events.PanelTrigger:FireServer(unpack(args))
                    end
                else
                    print("No players found matching: " .. playerName)
                end
                wait(1)
            end
        end)()
    end
end)

-- Function to activate a command for the local player
local function activateCommandForLocalPlayer(command, args)
    local player = game.Players.LocalPlayer
    if player then
        local fullArgs = { [1] = command }
        if args then
            for _, v in ipairs(args) do
                table.insert(fullArgs, v)
            end
        end
        game:GetService("ReplicatedStorage").Events.PanelTrigger:FireServer(unpack(fullArgs))
    else
        print("Local player not found.")
    end
end

-- Create the Toggle for executing the sequence of commands in a loop
local toggleActive = false

Tab2:CreateToggle("Auto Nuke", function(value)
    toggleActive = value

    if toggleActive then
        -- Define the function to execute the sequence
        local function executeSequence()
            -- Store the original position before teleportation
            local originalPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame

            -- Execute /speed command with speed 0
            activateCommandForLocalPlayer("/speed", {0})
            wait(0.1)

            -- Teleport to a new position
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-486.89471435546875, 271.95587158203125, 4.221779823303223)
            wait(0.5)

            -- Execute /god command
            activateCommandForLocalPlayer("/god")
            wait(0.2)

            -- Execute /nuke command
            activateCommandForLocalPlayer("/nuke")
            wait(3)

            -- Teleport back to the original position
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = originalPosition
            wait(0.1)

            -- Execute /speed command with speed 16
            activateCommandForLocalPlayer("/speed", {16})

            -- Wait for 60 seconds before continuing the loop
            wait(60)

            -- Check if the toggle is still active and continue the loop
            if toggleActive then
                executeSequence()
            end
        end

        -- Start the sequence loop
        executeSequence()
    end
end)

-- Cooldown time and tracking variables
local cooldownTime = 60
local lastExecutionTime = 0

-- Function to activate a command for the local player
local function activateCommandForLocalPlayer(command, args)
    local player = game.Players.LocalPlayer
    if player then
        local fullArgs = { [1] = command }
        if args then
            for _, v in ipairs(args) do
                table.insert(fullArgs, v)
            end
        end
        game:GetService("ReplicatedStorage").Events.PanelTrigger:FireServer(unpack(fullArgs))
    else
        print("Local player not found.")
    end
end

-- Function to teleport local player to a position
local function teleportToPosition(position)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(position)
end

-- Function to create and display a notification
local function showNotification(message)
    -- Create a ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    -- Create a TextLabel for the notification
    local notification = Instance.new("TextLabel")
    notification.Size = UDim2.new(0.3, 0, 0.1, 0)  -- Width and height of the notification
    notification.Position = UDim2.new(0.35, 0, 1, 0)  -- Start at the bottom of the screen
    notification.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)  -- Dark grey background
    notification.BackgroundTransparency = 0.3  -- 50% transparent
    notification.BorderSizePixel = 3.5  -- Outline thickness
    notification.BorderColor3 = Color3.new(0, 0, 0)  -- Black outline
    notification.TextColor3 = Color3.new(1, 1, 1)  -- White text
    notification.TextScaled = true
    notification.TextWrapped = true
    notification.Text = message  -- Set the notification message
    notification.Font = Enum.Font.ArialBold  -- Set the font to ArialBold
    notification.TextSize = 24  -- Set the custom text size
    notification.Parent = screenGui

    -- Add padding to the TextLabel
    local padding = Instance.new("UIPadding")
    padding.PaddingTop = UDim.new(0.1, 0)
    padding.PaddingBottom = UDim.new(0.1, 0)
    padding.PaddingLeft = UDim.new(0.1, 0)
    padding.PaddingRight = UDim.new(0.1, 0)
    padding.Parent = notification

    -- Use TweenService to create the slide animation
    local TweenService = game:GetService("TweenService")

    local tweenInfo = TweenInfo.new(1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local targetPosition1 = UDim2.new(0.35, 0, 0.9, 0)  -- Middle of the screen
    local targetPosition2 = UDim2.new(0.35, 0, 1, 0)  -- Bottom of the screen

    local slideUpTween = TweenService:Create(notification, tweenInfo, {Position = targetPosition1})
    local slideDownTween = TweenService:Create(notification, tweenInfo, {Position = targetPosition2})

    -- Play the slide up tween
    slideUpTween:Play()

    -- After the slide up tween completes, wait for 2 seconds and then play the slide down tween
    slideUpTween.Completed:Connect(function()
        wait(2)
        slideDownTween:Play()
    end)

    -- Destroy the screenGui after the slide down tween completes
    slideDownTween.Completed:Connect(function()
        screenGui:Destroy()
    end)
end

-- Store the original position of the player
local originalPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame

-- Activate the sequence of commands
Tab2:CreateButton("Nuke Lobby", function()
    local currentTime = tick()
    if currentTime - lastExecutionTime < cooldownTime then
        local remainingTime = math.ceil(cooldownTime - (currentTime - lastExecutionTime))
        showNotification("You need to wait " .. remainingTime .. "s to use Nuke")
        return
    end

    -- Update the last execution time
    lastExecutionTime = currentTime

    -- Execute /speed command with speed 0
    activateCommandForLocalPlayer("/speed", {0})
    wait(0.1)

    -- Teleport to a new position
    teleportToPosition(Vector3.new(-486.89471435546875, 271.95587158203125, 4.221779823303223))
    wait(0.5)

    -- Execute /god command
    activateCommandForLocalPlayer("/god")
    wait(0.2)

    -- Execute /nuke command
    activateCommandForLocalPlayer("/nuke")
    wait(3)

    -- Teleport back to the original position
    teleportToPosition(originalPosition.Position)
    wait(0.1)

    -- Execute /speed command with speed 16
    activateCommandForLocalPlayer("/speed", {16})
end)

-- Function to find players by partial name or display name
local function findPlayersByNameOrDisplayName(partialName)
    partialName = partialName:lower()

    local foundPlayers = {}
    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
        local playerName = player.Name:lower()
        local displayName = player.DisplayName:lower()

        if string.find(playerName, partialName, 1, true) or string.find(displayName, partialName, 1, true) then
            table.insert(foundPlayers, player)
        end
    end

    return foundPlayers
end

-- Function to activate a command for players
local function activateCommandForPlayers(command, players)
    for _, player in ipairs(players) do
        local args = {
            [1] = command,
            [2] = player.Name  -- Use the player's username
        }

        game:GetService("ReplicatedStorage").Events.PanelTrigger:FireServer(unpack(args))
    end
end

-- Variable to store the player name from the textbox
local playerName = ""

-- Create the TextBox for entering player username
Tab2:CreateTextbox("Enter Player Username", function(text)
    playerName = text
end)

-- Variable to store toggle state
local toggleActive = false

-- Create the Toggle for activating /saber
Tab2:CreateToggle("Auto /saber", function(value)
    toggleActive = value

    if toggleActive then
        -- Start a coroutine to handle the loop with a 1-second delay
        coroutine.wrap(function()
            while toggleActive do
                -- Check if "all" or "others" is typed in the textbox
                if playerName:lower() == "all" then
                    local players = game:GetService("Players"):GetPlayers()
                    activateCommandForPlayers("/saber", players)
                elseif playerName:lower() == "others" then
                    local players = {}
                    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
                        if player ~= game.Players.LocalPlayer then
                            table.insert(players, player)
                        end
                    end
                    activateCommandForPlayers("/saber", players)
                else
                    -- Find players based on the partial name entered in the textbox
                    local players = findPlayersByNameOrDisplayName(playerName)

                    if #players > 0 then
                        activateCommandForPlayers("/saber", players)
                    else
                        print("No players found matching: " .. playerName)
                    end
                end

                wait(2)  
            end
        end)()
    else
        print("Toggle deactivated")
        -- You can add logic here for when the toggle is deactivated, if needed
    end
end)

-- Create the Button for activating /saber
Tab2:CreateButton("Activate /saber <player>", function()
    -- Check if "all" or "others" is typed in the textbox
    if playerName:lower() == "all" then
        local players = game:GetService("Players"):GetPlayers()
        activateCommandForPlayers("/saber", players)
    elseif playerName:lower() == "others" then
        local players = {}
        for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
            if player ~= game.Players.LocalPlayer then
                table.insert(players, player)
            end
        end
        activateCommandForPlayers("/saber", players)
    else
        -- Find players based on the partial name entered in the textbox
        local players = findPlayersByNameOrDisplayName(playerName)

        if #players > 0 then
            activateCommandForPlayers("/saber", players)
        else
            print("No players found matching: " .. playerName)
        end
    end
end)



-- Create the TextBox
local playerName = ""

Tab3:CreateTextbox("Enter Player Username", function(text)
    playerName = text
end)

-- Function to find players by name or display name
local function findPlayersByNameOrDisplayName(name)
    if name:lower() == "all" then
        return game:GetService("Players"):GetPlayers()  -- Return all players if "all" is typed
    elseif name:lower() == "others" then
        local players = game:GetService("Players"):GetPlayers()
        local filteredPlayers = {}
        for _, player in ipairs(players) do
            if player ~= game.Players.LocalPlayer then
                table.insert(filteredPlayers, player)
            end
        end
        return filteredPlayers  -- Return all players except local player if "others" is typed
    end

    local foundPlayers = {}
    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
        if string.find(player.Name:lower(), name:lower()) or string.find(player.DisplayName:lower(), name:lower()) then
            table.insert(foundPlayers, player)
        end
    end
    return foundPlayers
end

-- Function to activate a command for players
local function activateCommandForPlayers(command)
    local players = findPlayersByNameOrDisplayName(playerName)
    if #players > 0 then
        for _, player in ipairs(players) do
            local args = {
                [1] = command,
                [2] = player.Name  -- Use the player's username
            }

            game:GetService("ReplicatedStorage").Events.PanelTrigger:FireServer(unpack(args))
        end
    else
        print("No players found matching: " .. playerName)
    end
end

-- Create the Toggle
local toggleActive = false

Tab3:CreateToggle("Auto Anonymous", function(value)
    toggleActive = value

    if toggleActive then
        -- Start a coroutine to handle the loop
        coroutine.wrap(function()
            while toggleActive do
                activateCommandForPlayers("/anonymous")
                wait(1)
            end
        end)()
    end
end)

-- Create the Toggle
local toggleActive = false

Tab3:CreateToggle("Ultra Fast Anonymous", function(value)
    toggleActive = value

    if toggleActive then
        -- Start a coroutine to handle the loop
        coroutine.wrap(function()
            while toggleActive do
                activateCommandForPlayers("/anonymous")
                wait(0.01)
            end
        end)()
    end
end)

-- Create the Button for /anonymous Command
Tab3:CreateButton("Anonymous <player>", function()
    activateCommandForPlayers("/anonymous")
end)

-- Function to find players by name or display name
local function findPlayersByNameOrDisplayName(name)
    if name:lower() == "all" then
        return game:GetService("Players"):GetPlayers()  -- Return all players if "all" is typed
    elseif name:lower() == "others" then
        local players = game:GetService("Players"):GetPlayers()
        local filteredPlayers = {}
        for _, player in ipairs(players) do
            if player ~= game.Players.LocalPlayer then
                table.insert(filteredPlayers, player)
            end
        end
        return filteredPlayers  -- Return all players except local player if "others" is typed
    end

    local foundPlayers = {}
    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
        if string.find(player.Name:lower(), name:lower()) or string.find(player.DisplayName:lower(), name:lower()) then
            table.insert(foundPlayers, player)
        end
    end
    return foundPlayers
end

-- Function to activate a command for players
local function activateCommandForPlayers(command)
    local players = findPlayersByNameOrDisplayName("all")  -- Get all players
    if #players > 0 then
        for _, player in ipairs(players) do
            local args = {
                [1] = command,
                [2] = player.Name  -- Use the player's username
            }

            game:GetService("ReplicatedStorage").Events.PanelTrigger:FireServer(unpack(args))
        end
    else
        print("No players found.")
    end
end

-- Create the Toggle
local toggleActive = false

Tab3:CreateToggle("Fast Respawn All", function(value)
    toggleActive = value

    if toggleActive then
        -- Start a coroutine to handle the loop
        coroutine.wrap(function()
            while toggleActive do
                activateCommandForPlayers("/anonymous")
                wait(0.1)
            end
        end)()
    end
end)

-- Function to find players by name or display name
local function findPlayersByNameOrDisplayName(name)
    if name:lower() == "all" then
        return game:GetService("Players"):GetPlayers()  -- Return all players if "all" is typed
    elseif name:lower() == "others" then
        local players = game:GetService("Players"):GetPlayers()
        local filteredPlayers = {}
        for _, player in ipairs(players) do
            if player ~= game.Players.LocalPlayer then
                table.insert(filteredPlayers, player)
            end
        end
        return filteredPlayers  -- Return all players except local player if "others" is typed
    end

    local foundPlayers = {}
    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
        if string.find(player.Name:lower(), name:lower()) or string.find(player.DisplayName:lower(), name:lower()) then
            table.insert(foundPlayers, player)
        end
    end
    return foundPlayers
end

-- Function to activate a command for players
local function activateCommandForPlayers(command)
    local players = findPlayersByNameOrDisplayName("others")  -- Get others players only
    if #players > 0 then
        for _, player in ipairs(players) do
            local args = {
                [1] = command,
                [2] = player.Name  -- Use the player's username
            }

            game:GetService("ReplicatedStorage").Events.PanelTrigger:FireServer(unpack(args))
        end
    else
        print("No other players found.")
    end
end

-- Create the Toggle
local toggleActive = false

Tab3:CreateToggle("Fast Respawn Others", function(value)
    toggleActive = value

    if toggleActive then
        -- Start a coroutine to handle the loop
        coroutine.wrap(function()
            while toggleActive do
                activateCommandForPlayers("/anonymous")
                wait(0.1)
            end
        end)()
    end
end)


-- Function to find players by name or display name
local function findPlayersByNameOrDisplayName(name)
    if name:lower() == "all" then
        return game:GetService("Players"):GetPlayers()  -- Return all players if "all" is typed
    elseif name:lower() == "others" then
        local players = game:GetService("Players"):GetPlayers()
        local filteredPlayers = {}
        for _, player in ipairs(players) do
            if player ~= game.Players.LocalPlayer then
                table.insert(filteredPlayers, player)
            end
        end
        return filteredPlayers  -- Return all players except local player if "others" is typed
    end

    local foundPlayers = {}
    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
        if string.find(player.Name:lower(), name:lower()) or string.find(player.DisplayName:lower(), name:lower()) then
            table.insert(foundPlayers, player)
        end
    end
    return foundPlayers
end

-- Function to activate a command for players
local function activateCommandForPlayers(command)
    local players = findPlayersByNameOrDisplayName("all")  -- Get all players
    if #players > 0 then
        for _, player in ipairs(players) do
            local args = {
                [1] = command,
                [2] = player.Name  -- Use the player's username
            }

            game:GetService("ReplicatedStorage").Events.PanelTrigger:FireServer(unpack(args))
        end
    else
        print("No players found.")
    end
end

-- Create the Toggle
local toggleActive = false

Tab3:CreateToggle("Ultra Fast Respawn All", function(value)
    toggleActive = value

    if toggleActive then
        -- Start a coroutine to handle the loop
        coroutine.wrap(function()
            while toggleActive do
                activateCommandForPlayers("/anonymous")
                wait(0.01)
            end
        end)()
    end
end)

-- Function to find players by name or display name
local function findPlayersByNameOrDisplayName(name)
    if name:lower() == "all" then
        return game:GetService("Players"):GetPlayers()  -- Return all players if "all" is typed
    elseif name:lower() == "others" then
        local players = game:GetService("Players"):GetPlayers()
        local filteredPlayers = {}
        for _, player in ipairs(players) do
            if player ~= game.Players.LocalPlayer then
                table.insert(filteredPlayers, player)
            end
        end
        return filteredPlayers  -- Return all players except local player if "others" is typed
    end

    local foundPlayers = {}
    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
        if string.find(player.Name:lower(), name:lower()) or string.find(player.DisplayName:lower(), name:lower()) then
            table.insert(foundPlayers, player)
        end
    end
    return foundPlayers
end

-- Function to activate a command for players
local function activateCommandForPlayers(command)
    local players = findPlayersByNameOrDisplayName("others")  -- Get others players only
    if #players > 0 then
        for _, player in ipairs(players) do
            local args = {
                [1] = command,
                [2] = player.Name  -- Use the player's username
            }

            game:GetService("ReplicatedStorage").Events.PanelTrigger:FireServer(unpack(args))
        end
    else
        print("No other players found.")
    end
end

-- Create the Toggle
local toggleActive = false

Tab3:CreateToggle("Ultra Fast Respawn Others", function(value)
    toggleActive = value

    if toggleActive then
        -- Start a coroutine to handle the loop
        coroutine.wrap(function()
            while toggleActive do
                activateCommandForPlayers("/anonymous")
                wait(0.01)
            end
        end)()
    end
end)











--Anti Kick

--game.Players.localPlayer:kick() --remove "--" to kick u self
 
--Auto execute highly recommended (use it)

game:GetService("StarterGui"):SetCore("SendNotification",{
 Title = "Anti Kick";
 Text = "Executed";
 Duration = 3;
})

gui = game.CoreGui.RobloxPromptGui.promptOverlay:WaitForChild("ErrorPrompt")

gui.Size = UDim2.new(0, 400, 0, 230)

leave = gui.MessageArea.ErrorFrame.ButtonArea.LeaveButton

gui.MessageArea.MessageAreaPadding.PaddingTop = UDim.new(0,-20)
gui.MessageArea.ErrorFrame.ErrorFrameLayout.Padding = UDim.new(0, 5)

gui.MessageArea.ErrorFrame.ButtonArea.ButtonLayout.CellPadding = UDim2.new(0, 0, 0, 5)

if not leave.Parent:FindFirstChild"Rejoin" then
rejoin = leave:Clone()
rejoin.Parent = leave.Parent
rejoin.Name="Rejoin"
rejoin.ButtonText.Text = "Rejoin"
end

Players = game:GetService("Players")
TeleportService = game:GetService("TeleportService")

rejoin.MouseButton1Click:Connect(function()
 if #Players:GetPlayers() <= 1 then
game.Players.localPlayer:kick("Rejoining...")
rejoin: destroy ()
wait(1)
  TeleportService:Teleport(game.PlaceId, Players.LocalPlayer)
 else
  TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, Players.LocalPlayer)
 end
end)
