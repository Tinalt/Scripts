-- Create the ScreenGui
local gui = Instance.new("ScreenGui")
gui.Name = "patrickGui"
gui.Parent = game.CoreGui

-- Create a frame to hold TextBox, ConfirmButton, and CloseButton
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 200, 0, 110) -- 200 width, 110 height
frame.Position = UDim2.new(0.5, -100, 0.5, -50) -- Center of the screen with slight offset
frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30) -- Dark background color
frame.BackgroundTransparency = 0.7 -- 70% transparent background
frame.BorderSizePixel = 0
frame.Parent = gui

-- Create the TextBox inside the frame
local TextBox = Instance.new("TextBox")
TextBox.Text = "/troll,/effect <player>"  -- Initial text with the command prefix
TextBox.TextSize = 14
TextBox.TextColor3 = Color3.new(1, 1, 1)
TextBox.BackgroundTransparency = 0.5 -- 50% transparent text box
TextBox.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Matching button color
TextBox.BorderSizePixel = 0
TextBox.Font = Enum.Font.Code
TextBox.Size = UDim2.new(0.8, 0, 0.6, 0) -- 80% width, 60% height of the frame
TextBox.Position = UDim2.new(0.1, 0, 0.1, 0) -- Centered horizontally, 10% down vertically in the frame
TextBox.ClearTextOnFocus = true
TextBox.Parent = frame

-- Create the Confirm Button inside the frame
local ConfirmButton = Instance.new("TextButton")
ConfirmButton.Text = "Send"
ConfirmButton.TextSize = 14
ConfirmButton.TextColor3 = Color3.new(1, 1, 1)
ConfirmButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Dark button color
ConfirmButton.BackgroundTransparency = 0.5 -- 50% transparent button
ConfirmButton.BorderSizePixel = 0
ConfirmButton.Font = Enum.Font.Code
ConfirmButton.Size = UDim2.new(0.5, 0, 0.2, 0) -- Half width, 20% height of the frame
ConfirmButton.Position = UDim2.new(0.25, 0, 0.8, 0) -- Centered horizontally, 80% down vertically in the frame
ConfirmButton.Parent = frame

-- Create the Close Button (X button) inside the frame
local CloseButton = Instance.new("TextButton")
CloseButton.Text = "X"
CloseButton.TextSize = 14
CloseButton.TextColor3 = Color3.new(1, 1, 1)
CloseButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50) -- Dark button color
CloseButton.BackgroundTransparency = 1 -- Fully transparent button
CloseButton.BorderSizePixel = 0
CloseButton.Font = Enum.Font.Code
CloseButton.Size = UDim2.new(0.1, 0, 0.1, 0) -- 10% width, 10% height of the frame
CloseButton.Position = UDim2.new(0.9, 0, 0.05, 0) -- Top-right corner of the frame, slightly up
CloseButton.Parent = frame

-- Create confirmation frame
local confirmationFrame = Instance.new("Frame")
confirmationFrame.Size = UDim2.new(0, 300, 0, 100) -- Larger size for a more prominent background
confirmationFrame.Position = UDim2.new(0.5, -150, 0.5, -50) -- Centered with respect to the screen
confirmationFrame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
confirmationFrame.BackgroundTransparency = 0.7
confirmationFrame.BorderSizePixel = 0
confirmationFrame.Visible = false
confirmationFrame.Parent = gui

-- Create confirmation text
local confirmationText = Instance.new("TextLabel")
confirmationText.Text = "Are you sure you want to close the GUI?"
confirmationText.TextColor3 = Color3.new(1, 1, 1)
confirmationText.TextSize = 14
confirmationText.Font = Enum.Font.Code
confirmationText.Size = UDim2.new(1, 0, 0.45, 0) -- Fill the entire confirmationFrame
confirmationText.Position = UDim2.new(0, 0, 0, 0) -- Centered within confirmationFrame
confirmationText.BackgroundTransparency = 1
confirmationText.Parent = confirmationFrame

-- Create Yes button
local yesButton = Instance.new("TextButton")
yesButton.Text = "Yes"
yesButton.TextColor3 = Color3.new(1, 1, 1)
yesButton.TextSize = 14
yesButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
yesButton.BackgroundTransparency = 0.5
yesButton.BorderSizePixel = 0
yesButton.Font = Enum.Font.Code
yesButton.Size = UDim2.new(0.3, 0, 0.3, 0)
yesButton.Position = UDim2.new(0.1, 0, 0.5, 0) -- Position adjusted within confirmationFrame
yesButton.Parent = confirmationFrame

-- Create No button
local noButton = Instance.new("TextButton")
noButton.Text = "No"
noButton.TextColor3 = Color3.new(1, 1, 1)
noButton.TextSize = 14
noButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
noButton.BackgroundTransparency = 0.5
noButton.BorderSizePixel = 0
noButton.Font = Enum.Font.Code
noButton.Size = UDim2.new(0.3, 0, 0.3, 0)
noButton.Position = UDim2.new(0.6, 0, 0.5, 0) -- Position adjusted within confirmationFrame
noButton.Parent = confirmationFrame

-- Function to send the message to the chat
local function trollPlayer(playerName)
    local remotes = {
        {"/clown", playerName},
        {"/fire", playerName, 250},
        {"/limbless", playerName},
        {"/tiny", playerName},
        {"/height", playerName, 0},
        {"/sleep", playerName},
        {"/slap", playerName}
    }
    
    for i, args in ipairs(remotes) do
        game:GetService("RunService").Heartbeat:Wait()
        game:GetService("ReplicatedStorage").Events.PanelTrigger:FireServer(unpack(args))
        wait(0.5) -- Wait 0.5 seconds before firing the next remote
    end
end

-- Function to enable dragging for the frame
local function enableDragging()
    local inputService = game:GetService("UserInputService")
    local dragObject = nil
    local dragStart = nil
    local startPos = nil

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch then
            dragObject = frame
            dragStart = input.Position
            startPos = frame.Position
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch and dragObject then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)

    frame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch and dragObject then
            dragObject = nil
        end
    end)
end

-- Function to show confirmation frame
local function showConfirmationFrame()
    confirmationFrame.Visible = true
    frame.Visible = false -- Hide the main frame when showing confirmation
end

-- Function to hide confirmation frame
local function hideConfirmationFrame()
    confirmationFrame.Visible = false
    frame.Visible = true -- Show the main frame when hiding confirmation
end

-- Call the function to enable dragging
enableDragging()

-- Function to handle Confirm Button click
ConfirmButton.MouseButton1Click:Connect(function()
    local enteredText = TextBox.Text
    local commandPrefix = "/troll "
    if string.sub(enteredText, 1, #commandPrefix) == commandPrefix then
        local playerName = string.sub(enteredText, #commandPrefix + 1)
        trollPlayer(playerName)
    else
        -- Handle incorrect command format here
        warn("Invalid command format.")
    end
end)

-- Function to handle Close Button click
CloseButton.MouseButton1Click:Connect(function()
    showConfirmationFrame()
end)

-- Function to handle Yes button click
yesButton.MouseButton1Click:Connect(function()
    gui:Destroy() -- Close the entire GUI
end)

-- Function to handle No button click
noButton.MouseButton1Click:Connect(function()
    hideConfirmationFrame() -- Hide confirmation frame and show main frame
end)

-- Add rounded corners to the frame
local cornerUI = Instance.new("UICorner")
cornerUI.CornerRadius = UDim.new(0, 5)
cornerUI.Parent = frame

-- Add a stroke (border) to the frame
local uiStroke = Instance.new("UIStroke")
-- Add a stroke (border) to the frame
uiStroke.Color = Color3.new(0, 0, 0)
uiStroke.Thickness = 2
uiStroke.Parent = frame

-- Add rounded corners to the confirmation frame
local cornerUI2 = Instance.new("UICorner")
cornerUI2.CornerRadius = UDim.new(0, 5)
cornerUI2.Parent = confirmationFrame

-- Add a stroke (border) to the confirmation frame
local uiStroke2 = Instance.new("UIStroke")
uiStroke2.Color = Color3.new(0, 0, 0)
uiStroke2.Thickness = 2
uiStroke2.Parent = confirmationFrame

-- Bring the frame to front so it's above other GUI elements
frame.ZIndex = 2

-- Function to send the message to the chat
local function sendMessageToChat(message)
    game:GetService("ReplicatedStorage"):FindFirstChild("DefaultChatSystemChatEvents"):FindFirstChild("SayMessageRequest"):FireServer(message, "All")
end

-- Function to troll a specific player with all troll commands
local function trollPlayer(playerName)
    local players = game:GetService("Players"):GetPlayers()

    for _, player in ipairs(players) do
        local matchUsername = string.find(string.lower(player.Name), string.lower(playerName), 1, true) -- Partial match for username
        local matchDisplayName = string.find(string.lower(player.DisplayName), string.lower(playerName), 1, true) -- Partial match for display name

        if matchUsername or matchDisplayName then
            local remotes = {
                {"/clown", player.Name},
                {"/fire", player.Name, 250},
                {"/limbless", player.Name},
                {"/tiny", player.Name},
                {"/height", player.Name, 0},
                {"/sleep", player.Name},
                {"/slap", player.Name}
            }

            for _, args in ipairs(remotes) do
                game:GetService("RunService").Heartbeat:Wait() -- Ensure each remote fires separately
                game:GetService("ReplicatedStorage").Events.PanelTrigger:FireServer(unpack(args))
                wait(0.5) -- Wait 0.5 seconds before firing the next remote
            end
            return -- Exit the function after trolling the player
        end
    end

    -- If no player matches the entered name
    warn("Player not found.")
end

-- Function to apply effects to a specific player
local function applyEffects(playerName)
    local players = game:GetService("Players"):GetPlayers()

    for _, player in ipairs(players) do
        local matchUsername = string.find(string.lower(player.Name), string.lower(playerName), 1, true) -- Partial match for username
        local matchDisplayName = string.find(string.lower(player.DisplayName), string.lower(playerName), 1, true) -- Partial match for display name

        if matchUsername or matchDisplayName then
            local effects = {
                {"/jump", player.Name},
                {"/night", player.Name},
                {"/fire", player.Name, 999},
                {"/neon", player.Name},
                {"/smoke", player.Name},
                {"/glow", player.Name},
                {"/removehats", player.Name},
                {"/sparkle", player.Name},
                {"/sparkle", player.Name}, -- Duplicate /sparkle effect in your list
                {"/trail", player.Name},
                {"/bighead", player.Name, 999},
                {"/spin", player.Name, 25},
                {"/limbless", player.Name},
                {"/jumppower", player.Name, 0},
                {"/sleep", player.Name},
                {"/skydive", player.Name, 999},
                {"/speed", player.Name, 0}
            }

            for _, args in ipairs(effects) do
                game:GetService("RunService").Heartbeat:Wait() -- Ensure each remote fires separately
                game:GetService("ReplicatedStorage").Events.PanelTrigger:FireServer(unpack(args))
                wait(0.5) -- Wait 0.5 seconds before firing the next effect
            end
            return -- Exit the function after applying effects to the player
        end
    end

    -- If no player matches the entered name
    warn("Player not found.")
end

-- Function to handle Confirm Button click for effects
ConfirmButton.MouseButton1Click:Connect(function()
    local enteredText = TextBox.Text
    local commandPrefix = "/effect "
    
    if string.sub(enteredText, 1, #commandPrefix) == commandPrefix then
        local playerName = string.sub(enteredText, #commandPrefix + 1)
        applyEffects(playerName) -- Apply effects to the player entered in the TextBox
    else
        -- Handle incorrect command format here
        warn("Invalid command format.")
    end
end)

-- Function to handle Confirm Button click for trolling
-- (assuming the ConfirmButton is also used for trolling, adjust as needed)
ConfirmButton.MouseButton1Click:Connect(function()
    local enteredText = TextBox.Text
    local commandPrefix = "/troll "
    
    if string.sub(enteredText, 1, #commandPrefix) == commandPrefix then
        local playerName = string.sub(enteredText, #commandPrefix + 1)
        trollPlayer(playerName) -- Troll the player entered in the TextBox
    else
        -- Handle incorrect command format here
        warn("Invalid command format.")
    end
end)

-- Ensure the rest of your existing GUI code remains unchanged


-- Function to handle Confirm Button click for effects
ConfirmButton.MouseButton1Click:Connect(function()
    local enteredText = TextBox.Text
    local commandPrefix = "/effect "
    
    if string.sub(enteredText, 1, #commandPrefix) == commandPrefix then
        local playerName = string.sub(enteredText, #commandPrefix + 1)
        applyEffects(playerName) -- Apply effects to the player entered in the TextBox
    else
        -- Handle incorrect command format here
        warn("Invalid command format.")
    end
end)

-- Function to handle Confirm Button click for trolling
-- (assuming the ConfirmButton is also used for trolling, adjust as needed)
ConfirmButton.MouseButton1Click:Connect(function()
    local enteredText = TextBox.Text
    local commandPrefix = "/troll "
    
    if string.sub(enteredText, 1, #commandPrefix) == commandPrefix then
        local playerName = string.sub(enteredText, #commandPrefix + 1)
        trollPlayer(playerName) -- Troll the player entered in the TextBox
    else
        -- Handle incorrect command format here
        warn("Invalid command format.")
    end
end)

-- Function to enable dragging for the frame
local function enableDragging()
    local inputService = game:GetService("UserInputService")
    local dragObject = nil
    local dragStart = nil
    local startPos = nil

    frame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch then
            dragObject = frame
            dragStart = input.Position
            startPos = frame.Position
        end
    end)

    frame.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch and dragObject then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)

    frame.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch and dragObject then
            dragObject = nil
        end
    end)
end

-- Function to show confirmation frame
local function showConfirmationFrame()
    confirmationFrame.Visible = true
    frame.Visible = false -- Hide the main frame when showing confirmation
end

-- Function to hide confirmation frame
local function hideConfirmationFrame()
    confirmationFrame.Visible = false
    frame.Visible = true -- Show the main frame when hiding confirmation
end

-- Call the function to enable dragging
enableDragging()

-- Function to handle Confirm Button click
ConfirmButton.MouseButton1Click:Connect(function()
    local enteredText = TextBox.Text
    local commandPrefix = "/troll "
    if string.sub(enteredText, 1, #commandPrefix) == commandPrefix then
        local playerName = string.sub(enteredText, #commandPrefix + 1)
        trollPlayer(playerName)
    else
        -- Handle incorrect command format here
        warn("Invalid command format.")
    end
end)

-- Function to handle Close Button click
CloseButton.MouseButton1Click:Connect(function()
    showConfirmationFrame()
end)

-- Function to handle Yes button click
yesButton.MouseButton1Click:Connect(function()
    gui:Destroy() -- Close the entire GUI
end)

-- Function to handle No button click
noButton.MouseButton1Click:Connect(function()
    hideConfirmationFrame() -- Hide confirmation frame and show main frame
end)

-- Add rounded corners to the frame
local cornerUI = Instance.new("UICorner")
cornerUI.CornerRadius = UDim.new(0, 5)
cornerUI.Parent = frame

-- Add a stroke (border) to the frame
local uiStroke = Instance.new("UIStroke")
uiStroke.Color = Color3.new(0, 0, 0)
uiStroke.Thickness = 2
uiStroke.Parent = frame

-- Add rounded corners to the confirmation frame
local cornerUI2 = Instance.new("UICorner")
cornerUI2.CornerRadius = UDim.new(0, 5)
cornerUI2.Parent = confirmationFrame

-- Add a stroke (border) to the confirmation frame
local uiStroke2 = Instance.new("UIStroke")
uiStroke2.Color = Color3.new(0, 0, 0)
uiStroke2.Thickness = 2
uiStroke2.Parent = confirmationFrame

-- Bring the frame to front so it's above other GUI elements
frame.ZIndex = 2
