local kavoUi = loadstring(game:HttpGet("https://raw.githubusercontent.com/Toilatin/Insane-elevator/main/Insane2"))()
local window = kavoUi.CreateLib("ABW Auto Roll Orbs","BloodTheme")

---Toggle Button

local gui = Instance.new("ScreenGui")
gui.Name = "patrickGui"
gui.Parent = game.CoreGui

-- Create the TextButton
local TextButton = Instance.new("TextButton")
-- Text
TextButton.Text = "Toggle"
TextButton.TextSize = 14
-- Color
TextButton.TextColor3 = Color3.new(1, 1, 1)
TextButton.BackgroundColor3 = Color3.new(0, 0, 0)
TextButton.BorderColor3 = Color3.new(0, 0, 0)
-- Transparency
TextButton.BackgroundTransparency = 0.5
-- Thickness
TextButton.BorderSizePixel = 4
-- Text Code
TextButton.Font = Enum.Font.Code
-- Size (making it a small square)
TextButton.Size = UDim2.new(0, 50, 0, 50)  -- 50Ã—50 pixels
-- Position
TextButton.Position = UDim2.new(1, -110, 0, 10)  -- Center of the screen
-- Function
TextButton.MouseButton1Click:Connect(function()
    kavoUi:ToggleUI()
end)
TextButton.Parent = gui
TextButton.Draggable = true

-- Adding UICorner for rounded corners
local cornerUI = Instance.new("UICorner")
cornerUI.CornerRadius = UDim.new(0, 5)
cornerUI.Parent = TextButton

-- Adding UIStroke for border
local uiStroke = Instance.new("UIStroke")
uiStroke.Color = Color3.new(0, 0, 0)
uiStroke.Thickness = 2
uiStroke.Parent = TextButton


---Hi

local Tab1 = window:NewTab("Main")
local Tab1Section = Tab1:NewSection("Auto Roll Orbs")

local Tab2 = window:NewTab("Info")
local Tab2Section = Tab2:NewSection("Info")

local Tab3 = window:NewTab("Settings")
local Tab3Section = Tab3:NewSection("Settings")

--Buttons

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local toggleState = false
local orbHandle = Workspace:FindFirstChild("Regeneration Orb") and Workspace["Regeneration Orb"].Handle

local function invokePAPFunction()
    ReplicatedStorage:FindFirstChild("Remote Events").PAPFunction:InvokeServer()
end

local function checkOrbHandle()
    orbHandle = Workspace:FindFirstChild("Regeneration Orb") and Workspace["Regeneration Orb"].Handle
end

local function toggleOffActions()
    print("Toggle Off")
    -- Optionally, you can add code here to stop any ongoing actions related to the toggle off scenario.
end

Tab1Section:NewToggle("Regeneration Orb", "Auto Roll", function(state)
    toggleState = state  -- Update toggleState based on current state
    
    if toggleState then
        print("Toggle On")
        invokePAPFunction()  -- Initial invoke when toggled on
        
        -- Continuously check if orb handle exists
        while toggleState do
            wait(0.5)  -- Wait for 2 seconds before checking again
            
            checkOrbHandle()  -- Check orb handle status
            
            if orbHandle then
                print("Got the Regeneration Orb!")  -- Print message when orb is obtained
                break  -- Break out of the loop when orb is found
            else
                invokePAPFunction()  -- Invoke again if orb handle not found
            end
        end
    else
        toggleOffActions()
    end
end)


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local toggleState = false
local orbHandle = Workspace:FindFirstChild("Speed Orb") and Workspace["Speed Orb"]:FindFirstChild("Handle")

local function invokePAPFunction()
    local remoteEvents = ReplicatedStorage:FindFirstChild("Remote Events")
    if remoteEvents and remoteEvents:FindFirstChild("PAPFunction") then
        remoteEvents.PAPFunction:InvokeServer()
    end
end

local function checkOrbHandle()
    local speedOrb = Workspace:FindFirstChild("Speed Orb")
    orbHandle = speedOrb and speedOrb:FindFirstChild("Handle")
end

local function toggleOffActions()
    print("Toggle Off")
    -- Optionally, you can add code here to stop any ongoing actions related to the toggle off scenario.
end

Tab1Section:NewToggle("Speed Orb", "Auto Roll", function(state)
    toggleState = state
    
    if toggleState then
        print("Toggle On")
        invokePAPFunction()  -- Initial invoke when toggled on
        
        -- Continuously check if orb handle exists
        spawn(function()
            while toggleState do
                wait(0.5)
                
                checkOrbHandle()
                
                if orbHandle then
                    print("Got the Speed Orb!")
                    toggleState = false  -- Optionally, set toggleState to false if orb is found
                    break
                else
                    invokePAPFunction()
                end
            end
        end)
    else
        toggleOffActions()
    end
end)


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local toggleState = false
local orbHandle = Workspace:FindFirstChild("Damage Orb") and Workspace["Damage Orb"]:FindFirstChild("Handle")

local function invokePAPFunction()
    local remoteEvents = ReplicatedStorage:FindFirstChild("Remote Events")
    if remoteEvents and remoteEvents:FindFirstChild("PAPFunction") then
        remoteEvents.PAPFunction:InvokeServer()
    end
end

local function checkOrbHandle()
    local damageOrb = Workspace:FindFirstChild("Damage Orb")
    orbHandle = damageOrb and damageOrb:FindFirstChild("Handle")
end

local function toggleOffActions()
    print("Toggle Off")
    -- Optionally, you can add code here to stop any ongoing actions related to the toggle off scenario.
end

Tab1Section:NewToggle("Damage Orb", "Auto Roll", function(state)
    toggleState = state
    
    if toggleState then
        print("Toggle On")
        invokePAPFunction()  -- Initial invoke when toggled on
        
        -- Continuously check if orb handle exists
        spawn(function()
            while toggleState do
                wait(0.5)
                
                checkOrbHandle()
                
                if orbHandle then
                    print("Got the Damage Orb!")
                    toggleState = false  -- Optionally, set toggleState to false if orb is found
                    break
                else
                    invokePAPFunction()
                end
            end
        end)
    else
        toggleOffActions()
    end
end)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local toggleState = false
local orbHandle = Workspace:FindFirstChild("Divine Orb") and Workspace["Divine Orb"]:FindFirstChild("Handle")

local function invokePAPFunction()
    local remoteEvents = ReplicatedStorage:FindFirstChild("Remote Events")
    if remoteEvents and remoteEvents:FindFirstChild("PAPFunction") then
        remoteEvents.PAPFunction:InvokeServer()
    end
end

local function checkOrbHandle()
    local divineOrb = Workspace:FindFirstChild("Divine Orb")
    orbHandle = divineOrb and divineOrb:FindFirstChild("Handle")
end

local function toggleOffActions()
    print("Toggle Off")
    -- Optionally, you can add code here to stop any ongoing actions related to the toggle off scenario.
end

Tab1Section:NewToggle("Divine Orb", "Auto Roll", function(state)
    toggleState = state
    
    if toggleState then
        print("Toggle On")
        invokePAPFunction()  -- Initial invoke when toggled on
        
        -- Continuously check if orb handle exists
        spawn(function()
            while toggleState do
                wait(0.5)
                
                checkOrbHandle()
                
                if orbHandle then
                    print("Got the Divine Orb!")
                    toggleState = false  -- Optionally, set toggleState to false if orb is found
                    break
                else
                    invokePAPFunction()
                end
            end
        end)
    else
        toggleOffActions()
    end
end)


local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local toggleState = false
local connector = Workspace:FindFirstChild("Propeller") and Workspace.Propeller:FindFirstChild("Connector")

local function invokePAPFunction()
    local remoteEvents = ReplicatedStorage:FindFirstChild("Remote Events")
    if remoteEvents and remoteEvents:FindFirstChild("PAPFunction") then
        remoteEvents.PAPFunction:InvokeServer()
    end
end

local function checkConnector()
    local propeller = Workspace:FindFirstChild("Propeller")
    connector = propeller and propeller:FindFirstChild("Connector")
end

local function toggleOffActions()
    print("Toggle Off")
    -- Optionally, you can add code here to stop any ongoing actions related to the toggle off scenario.
end

Tab1Section:NewToggle("Propeller Connector", "Auto Roll", function(state)
    toggleState = state
    
    if toggleState then
        print("Toggle On")
        invokePAPFunction()  -- Initial invoke when toggled on
        
        -- Continuously check if connector exists
        spawn(function()
            while toggleState do
                wait(0.5)
                
                checkConnector()
                
                if connector then
                    print("Got the Propeller Connector!")
                    toggleState = false  -- Optionally, set toggleState to false if connector is found
                    break
                else
                    invokePAPFunction()
                end
            end
        end)
    else
        toggleOffActions()
    end
end)

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local toggleState = false
local eyeHandle = Workspace:FindFirstChild("All-Seeing Eye") and Workspace["All-Seeing Eye"]:FindFirstChild("Handle")

local function invokePAPFunction()
    local remoteEvents = ReplicatedStorage:FindFirstChild("Remote Events")
    if remoteEvents and remoteEvents:FindFirstChild("PAPFunction") then
        remoteEvents.PAPFunction:InvokeServer()
    end
end

local function checkEyeHandle()
    local allSeeingEye = Workspace:FindFirstChild("All-Seeing Eye")
    eyeHandle = allSeeingEye and allSeeingEye:FindFirstChild("Handle")
end

local function toggleOffActions()
    print("Toggle Off")
    -- Optionally, you can add code here to stop any ongoing actions related to the toggle off scenario.
end

Tab1Section:NewToggle("All-Seeing Eye Orb", "Auto Roll", function(state)
    toggleState = state
    
    if toggleState then
        print("Toggle On")
        invokePAPFunction()  -- Initial invoke when toggled on
        
        -- Continuously check if eye handle exists
        spawn(function()
            while toggleState do
                wait(0.5)
                
                checkEyeHandle()
                
                if eyeHandle then
                    print("Got the All-Seeing Eye!")
                    toggleState = false  -- Optionally, set toggleState to false if eye handle is found
                    break
                else
                    invokePAPFunction()
                end
            end
        end)
    else
        toggleOffActions()
    end
end)




Tab3Section:NewButton("Destroy Toggle Button","Destroy ToggleUi button",function()

-- Function to delete all instances of "patrickGui" from CoreGui
local function deleteAllPatrickGui()
    local coreGui = game.CoreGui
    
    -- Iterate through each child in CoreGui
    for _, child in ipairs(coreGui:GetChildren()) do
        -- Check if the child is named "patrickGui"
        if child.Name == "patrickGui" then
            -- Delete the patrickGui instance
            child:Destroy()
            print("Deleted patrickGui:", child.Name)
        end
    end
    
    print("All instances of patrickGui deleted.")
end

-- Call the function to delete all instances of "patrickGui"
deleteAllPatrickGui()

end)

local Tab2Section = Tab2:NewSection("You don't need 1.5k punches to use PAP")

local Tab2Section = Tab2:NewSection("This script bypass the punches requirement")
